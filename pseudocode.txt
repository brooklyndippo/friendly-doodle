Steps to complete:

1. Initialie project in Github repository ✓
2. Import starter code and word bank ✓
3. Create a scoring system ✓

SET score = 0
SET game_win = false
IF game_win is true:
    THEN ADD word_lenght x 100 to the score
    RESET game_win to false
    RESET bad_guess to 0

4. Create an input for guessing ✓

GET guess
(Should be single letter, not repeated.)

5. Create a check to see if the guess letter is in the word ✓


FUNCTION check_guess:
    STORE the guess in list already_guessed
    IF the guess IS NOT a letter:
        DISPLAY error message
        PROMPT to guess again
    ELIF the guess IS IN already_guessed:
        DISPLAY error message
        PROMPT to guess again
    ELIF the guess IS IN the secret_word:
        THEN replace corresponding underscore with guess
    ELSE:
        bad_guess += 1
        DISPLAY You have # guesses left.

6. Create a check to see if the letter was guessed already ✓

IF guess IS IN already_guessed list:
    DISPLAY "You already guesssed that letter. Guess again!"

7. Limit number of incorrect guesses ✓

SET bad_guess = 0
ADD 1 when guess IS NOT IN secret_word (see step #5)

8. Display blank spaces according to word length ✓

SET num_blank_spaces = LENGTH of secret_word
INITIALIZE blank_spaces list = "_" * num_blank_spaces

9. Replace the spaces with letters on correct guesses ✓

IF the guess IS IN the secret_word:
DOWHILE loop through each letter of the secret_word:
    IF the guess == letter:
        THEN REPLACE blank_spaces[letter] with guess 

10. Test & reiterate! ✓

---
Day 03: Build out guessing functionality, scoring system
Day 05: Establish how to traverse a word to find all instances of a letter
Day 06: Tie all the pieces of the project together, test with short and long words, and test with words that have repeat letters (like "apple”)
Day 07: Fix any remaining bugs, make sure your code has helpful comments, and submit the project!
Requirements
Your project must meet the below requirements in order to be considered passing:

✓ User must be able to enter letters to guess 
The user must get accurate feedback on if they guessed a correct letter or an incorrect letter
The user is always prompted to guess a letter until they win or lose 
✓ The game must use the provided list of words as its source. 
User is allowed seven (7) incorrect guesses, and they should be told how many guesses they have left after each incorrect guess
After guessing a letter, the user must be told the following:
Correct guess: the placeholder text with the correct letter filled in.
If the word is "dog" and they guess "g" as their first guess, they should see _ _ g
Incorrect guess: a message telling them their guess is incorrect, and then the number of guesses they have remaining
If a guessed letter appears multiple times in the word, that guessed letter should appear in all valid blanks
Correct Example (word is "apple”): p → _ pp_ _
Incorrect Example (word is "apple”): p → p _
If a user successfully guesses all the letters, the game ends, and the user is shown a message notifying them that they won
If a user guesses incorrectly seven (7) times, the game ends, and the user is shown a message notifying them that they lost
Stretch Requirements/Challenges (Optional)
Alert the user if they guessed a letter they already guessed, and don’t have it count as an incorrect guess
Users can only guess individual letters at a time. If they guess anything other than an individual letter, they should be prompted and told to input only one letter
Prompt the user to play again after a game ends. If they say yes, then start a new game.
Change the number of incorrect guesses allowed to match the length of the mystery word
Show the user the mystery word when they lose
Use ASCII art to draw the spaceman with each incorrect guess
Add error handling to your Spaceman project and improve code quality using the feedback you gained from the previous activity.
Sinister Spaceman: After the user guesses a correct letter, change the mystery word to be a new mystery word that is the same word length and uses the same correctly guessed letters
Example: mystery word is "car”, user guesses "a”, the user is shown "a”, but the word is now changed to "bar”
User guesses "c”, which results in an incorrect guess.
They then guess "b”, the user is shown "ba_”, but the word is now changed to "bat”
User guesses "r”, which results in an incorrect guess.
User guesses "t”, which results in a correct guess, and the user wins
